package eisbw;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 * @author Danny & Harm - The windowstool for starting the chaoslauncher and
 *         writing the menu script.
 *
 */
public class WindowsTools {
	private WindowsTools() {
		// Private constructor to hide the public one.
	}

	/**
	 * Check if a process is running on the system.
	 *
	 * @param process
	 *            the name of the process.
	 * @return true iff a process is running.
	 */
	public static boolean isProcessRunning(String process) {
		try {
			Process proc = Runtime.getRuntime().exec("tasklist.exe");
			BufferedReader stdInput = new BufferedReader(new InputStreamReader(proc.getInputStream()));

			String line;
			while ((line = stdInput.readLine()) != null) {
				if (line.contains(process)) {
					stdInput.close();
					return true;
				}
			}
			stdInput.close();
		} catch (IOException exception) {
			Logger.getLogger("StarCraft Logger").log(Level.SEVERE, "Could not read processes.", exception);
		}
		return false;
	}

	/**
	 * Starts the Chaoslauncher with launch rules.
	 *
	 * @param race
	 *            the race specified in the mas2g
	 * @param map
	 *            the map specified in the mas2g
	 * @param scDir
	 *            the starcraft installation directory in the mas2g.
	 * @param autoMenu
	 *            the automenu (single- or multi-player) specified in the mas2g
	 * @param enemyRace
	 *            the enemy race
	 * @param seed
	 *            the seed (overrides the game seed if > 0)
	 * @throws IOException
	 *             throws exception when BWAPI.ini cannot be written.
	 */
	public static void startChaoslauncher(String race, String map, String scDir, String autoMenu, String gameType,
			String enemyRace, int seed) throws IOException {
		populateInitFile(race, map, scDir, autoMenu, gameType, enemyRace, seed);
		if (autoMenu.toLowerCase().equals("lan")) {
			Runtime.getRuntime().exec(new String[] { scDir + "\\Chaoslauncher\\Chaoslauncher - MultiInstance.exe" },
					null, new File(scDir + "\\Chaoslauncher\\"));
		} else {
			Runtime.getRuntime().exec(scDir + "\\Chaoslauncher\\Chaoslauncher.exe", null,
					new File(scDir + "\\Chaoslauncher\\"));
		}
	}

	private static void populateInitFile(String race, String map, String scDir, String autoMenu, String gameType,
			String enemyRace, int seed) {
		String bwapiDest = scDir + "\\bwapi-data\\bwapi.ini";
		String iniFile = getIniFile(race, map, autoMenu, gameType, enemyRace, seed);
		try {
			BufferedWriter out = new BufferedWriter(new FileWriter(new File(bwapiDest)));
			out.write(iniFile);
			out.close();
		} catch (Exception exception) {
			Logger.getLogger("StarCraft Logger").log(Level.SEVERE, "Could not write config file.", exception);
		}
	}

	protected static String getIniFile(String race, String map, String autoMenu, String gameType, String enemyRace,
			int seed) {
		String newLine = System.getProperty("line.separator");
		String iniFile = "";
		iniFile += ";Generated by GOAL launcher" + newLine;

		iniFile += "[ai]" + newLine;
		iniFile += "ai     = NULL" + newLine + newLine;

		iniFile += "[auto_menu]" + newLine;
		iniFile += "auto_menu = " + autoMenu + newLine;
		iniFile += "game_type = " + gameType + newLine;
		if (autoMenu.toLowerCase().equals("lan")) {
			iniFile += "lan_mode = local pc" + newLine;
		}
		iniFile += "pause_dbg = OFF" + newLine;
		iniFile += "auto_restart = OFF" + newLine;
		iniFile += "map = maps\\" + map + newLine;
		iniFile += "race = " + race + newLine;
		iniFile += "enemy_count = 1" + newLine;
		iniFile += "enemy_race = " + enemyRace + newLine + newLine;

		iniFile += "[config]" + newLine;
		iniFile += "holiday = OFF" + newLine;
		iniFile += "shared_memory = ON" + newLine + newLine;

		iniFile += "[window]" + newLine;
		iniFile += "windowed = ON" + newLine;
		iniFile += "width  = 1024" + newLine;
		iniFile += "height = 768" + newLine + newLine;

		iniFile += "[starcraft]" + newLine;
		iniFile += "sound = ON" + newLine;
		if (seed > 0) {
			iniFile += "seed_override = " + Integer.toString(seed) + newLine;
		}
		return iniFile;
	}

	protected static String getRace(String race, int seed) {
		if (race.equals("randomtp")) {
			Random random = (seed > 0) ? new Random(seed) : new Random();
			return (random.nextInt(2) == 0) ? "terran" : "protoss";
		} else if (race.equals("randomtz")) {
			Random random = (seed > 0) ? new Random(seed) : new Random();
			return (random.nextInt(2) == 0) ? "terran" : "zerg";
		} else if (race.equals("randompz")) {
			Random random = (seed > 0) ? new Random(seed) : new Random();
			return (random.nextInt(2) == 0) ? "protoss" : "zerg";
		} else {
			return race;
		}
	}
}
